// @ts-nocheck
import Phaser from 'phaser'
export default class CoronaBusterScene extends
Phaser.Scene
{
    constructor(){
        super('corona-buster-scene');
    }
    init(){
        this.clouds = undefined;

        this.nav_left = false;
        this.nav_right = false;
        this.shoot = false;

    }
    preload(){
        this.load.image('background','images/bg_layer1.png')
        this.load.image('cloud', 'images/cloud.png')

        this.load.image('left-btn', 'images/left-btn.png')
        this.load.image('right-btn', 'images/right-btn.png')
        this.load.image('shoot', 'images/shoot-btn.png')

    }
    create(){
        const gameWidht = this.scale.width*0.5;
        const gameHeight = this.scale.height*0.5;
        this.add.image(gameWidht,gameHeight,"background")

        this.clouds= this.physics.add.group({
            key : 'cloud',
            repeat :10,
        })

        Phaser.Actions.RandomRectangle(
            this.clouds.getChildren(),
            this.physics.world.bounds
        )

        this.creatButton()

    }
    update(){
        this.clouds.children.iterate((child) =>{
                child.setVelocityY(20)
        })

        this.clouds.children.iterate((child) =>{
                child.setVelocityY(20)
                if (child.y > this.scale.height){
                    // @ts-ignore
                    child.x = Phaser.Math.Between(10,400)
                    // @ts-ignore
                    child.y = 0;
                }
        })

    }

    creatButton(){
        this.input.addPointer(3)

        let shoot = this.add.image(320,550, 'shoot')
            .setInteractive().setDepth(0.5).setAlpha(0.8)
        
        let nav_left = this.add.image(50,550, 'left-btn')
            .setInteractive().setDepth(0.5).setAlpha(0.8)
        
        let nav_right = this.add.image(nav_left.x +
        nav_left.displayWidth+20, 550,'right-btn')
            .setInteractive().setDepth(0.5).setAlpha(0.8)
        

        nav_left.on('pointerdown', () => {
            this.nav_left = true
        }, this)

        nav_left.on('pointerdown', () => {
            this.nav_left = false
        }, this)

        nav_right.on('pointerdown', () => {
            this.nav_left = true
        }, this)

        nav_right.on('pointerdown', () => {
            this.nav_left = false
        }, this)

        shoot.on('pointerdown', () => {
            this.nav_left = true
        }, this)

        shoot.on('pointerdown', () => {
            this.nav_left = false
        }, this)
    }
}
